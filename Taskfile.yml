version: '3'

includes:
  release:
    taskfile: hack/common/tasks_rls.yaml
    aliases:
    - rls
    - r

  tools:
    taskfile: hack/common/tasks_tools.yaml
    aliases:
      - tools
      - t

vars:
  REPO_URL: "github.com/openmcp-project/gitops-templates"
  VERSION:
    sh: 'cat VERSION'
  COMMIT:
    sh: '( cd "{{.ROOT_DIR2}}"; git rev-parse HEAD )'
  ROOT_DIR2: '{{.ROOT_DIR | trimSuffix "/common" | trimSuffix "/hack"}}'
  TASKFILE_DIR2:
    sh: 'if [[ "{{.TASKFILE_DIR}}" == "{{.ROOT_DIR2}}" ]] || [[ "{{.TASKFILE_DIR}}" == "" ]]; then echo -n "{{.ROOT_DIR2}}/hack/common"; else echo -n "{{.TASKFILE_DIR}}"; fi'
  LOCALBIN: '{{ env "LOCALBIN" | default ( .LOCALBIN | default (print .ROOT_DIR2 "/bin") ) }}'
  LOCALTMP: '{{ env "LOCALTMP" | default ( .LOCALTMP | default (print .ROOT_DIR2 "/tmp") ) }}'
  JQ: '{{ .JQ | default (print .LOCALBIN "/jq") }}'
  HELM: '{{ .HELM | default (print .LOCALBIN "/helm") }}'
  YAML2JSON: '{{ .YAML2JSON | default (print .LOCALBIN "/yaml2json") }}'
  OCM: '{{ .OCM | default (print .LOCALBIN "/ocm") }}'
  ENVTEST: '{{ .ENVTEST | default (print .LOCALBIN "/setup-envtest") }}'

tasks:
  build:
    deps:
    - tools:ocm
    - tools:localtmp
    vars:
      compdir: '{{.LOCALTMP}}/component'
    desc: Build ocm component
    cmds:
      # - |
      #   ocm add componentversions \
      #   --copy-resources --force --create \
      #   --file {{.compdir}} \
      #   --settings settings.yaml \
      #   component-constructor.yaml
      - |
        "{{.OCM}}" add componentversions \
            --file "{{.compdir}}" \
            --version "{{.VERSION}}" \
            --create --force \
            --settings {{.ROOT_DIR2}}/settings.yaml \
            --templater subst "{{.ROOT_DIR2}}/component-constructor.yaml" -- \
            VERSION="{{.VERSION}}" \
            COMMIT="{{.COMMIT}}" \
            REPO_URL="{{.REPO_URL}}"
  lint:
    desc: Lint YAML files in templates directory
    cmds:
      - yamllint templates

  push:
    deps:
    - tools:ocm
    - tools:localtmp
    desc: Push to OCM Registry
    cmds:
      - ocm transfer ctf -f {{.compdir}} "{{.COMPONENT_REGISTRY}}" {{.overwrite_mod}}
    vars:
      compdir: '{{.LOCALTMP}}/component'
      overwrite_mod:
        sh: 'if [[ -n ${OVERWRITE_COMPONENTS:-} ]] && [[ ${OVERWRITE_COMPONENTS} != "false" ]]; then echo -n "--overwrite"; fi'
      COMPONENT_REGISTRY:
        sh: 'PROJECT_ROOT="{{.ROOT_DIR2}}" hack/common/get-registry.sh --component'

  flux:
    desc: Renders the latest flux template using the flux cli
    cmds:
      - |
        flux install --export \
        --components-extra="image-reflector-controller,image-automation-controller" \
        > gotk-components.yaml
    dir: ./templates/fluxcd

  pull:
    desc: Pulls the resources from the gitops-template ocm.
    cmds:
      - |
        ocm download resources \
        --downloader ocm/dirtree \
        --repo OCIRegistry::ghcr.io/n3rdc4ptn/ocm \
        github.com/openmcp-project/gitops-templates:0.0.2 \
        openmcp fluxcd

  template:
    desc: Testing command just to show the templates
    cmds:
      - |
        helm template --output-dir {{.OUTPUT_DIR}} \
        --set openmcpOperator.image="ghcr.io/openmcp-project/images/openmcp-operator" \
        --set openmcpOperator.tag="latest" \
        ./github.com/openmcp-project/gitops-templates/0.0.2/openmcp
      - |
        helm template --output-dir {{.OUTPUT_DIR}} \
        --set openmcpOperator.image="ghcr.io/openmcp-project/images/openmcp-operator" \
        --set openmcpOperator.tag="latest" \
        ./github.com/openmcp-project/gitops-templates/0.0.2/openmcp
    vars:
      OUTPUT_DIR: "output"

  version:
    desc: Prints the current version of the project
    cmds:
      - cat VERSION
